{"version":3,"sources":["webpack://InactivityLogout/webpack/universalModuleDefinition","webpack://InactivityLogout/webpack/bootstrap","webpack://InactivityLogout/./inactivity-countdown-timer.ts","webpack://InactivityLogout/./main.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","InactivityCountdownTimerStatus","defaultInactivityConfig","idleTimeoutTime","localStorageKey","resetEvents","windowResetEvents","throttleDuration","params","deps","countingDown","status","stopped","this","logger","console","document","localStorage","detectAndAssignLocalStorage","setup","started","cleanup","assign","ensureReasonableTimings","attacheEventListeners","start","handleEvent","eventName","currentTime","Date","getTime","setLastResetTimeStamp","throttle","startPrivate","internalTimeoutTime","stop","clearInterval","idleIntervalId","detachEventListeners","removeEventListener","clearTimeout","throttleTimeoutId","startCountDownTimerAt","log","maxThrottleTime","Math","floor","setTimeout","length","addEventListener","precision","currentTimerPrecision","setInterval","checkIdleTime","resetTimer","timeout","timeoutCallback","milliSecondDiff","getLastResetTimeStamp","timeRemaining","checkTimerPrecision","handleCountDown","inCountDownTimeFrame","countDownCallback","abs","ceil","countDownCancelledCallback","nextTimeoutWhen","lastResetTimeStampString","getItem","lsLastResetTimeStamp","parseInt","lastResetTimeStamp","timestamp","setItem","toString","_localStorage","Boolean","localStorageOrNull","result","uid","storage","removeItem","exception","InactivityCountdownTimer"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InactivityLogout\"] = factory();\n\telse\n\t\troot[\"InactivityLogout\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export interface IRegisterCallBacks {\n    timeoutCallback?(): void;\n    countDownCallback?(secondsLeft: number): void;\n    countDownCancelledCallback?(): void;\n}\n\nexport interface IInactivityConfig extends IRegisterCallBacks {\n    startCountDownTimerAt?: number;\n    idleTimeoutTime?: number;\n    localStorageKey?: string;\n    resetEvents?: string[];\n    windowResetEvents?: string[];\n    throttleDuration?: number;\n}\n\nexport interface ILogger {\n    log(message?: any, ...optionalParams: any[]): void;\n}\n\nexport interface IInactivityDependencies {\n    logger?: ILogger;\n    localStorage?: Storage | null;\n    window?: Window;\n    document?: Document;\n}\n\nconst defaultInactivityConfig: IInactivityConfig = {\n    idleTimeoutTime: 10000,\n    localStorageKey: 'inactivity_logout_local_storage',\n    resetEvents: ['click','mousemove','keypress'],\n    windowResetEvents: ['load'],\n    throttleDuration: 0\n};\n\nexport enum InactivityCountdownTimerStatus {\n    started = 'started',\n    stopped = 'stopped'\n}\n\nexport class InactivityCountdownTimer implements EventListenerObject {\n    // InactivityConfig\n    private idleTimeoutTime: number;\n    private startCountDownTimerAt: number;\n    private localStorageKey: string;\n    private resetEvents: string[] = [];\n    private windowResetEvents: string[] = [];\n\n    // IRegisterCallbacks\n    private timeoutCallback: () => void;\n    private countDownCallback: (secondsLeft: number) => void;\n    private countDownCancelledCallback: () => void;\n\n    // Internal vars\n    readonly localStorage: Storage | null;\n    private internalTimeoutTime: number;\n    private lastResetTimeStamp: number;\n    private countingDown: boolean = false;\n    private idleIntervalId: number;\n    private currentTimerPrecision: number;\n    private throttleDuration: number;\n    private throttleTimeoutId: number;\n\n    // status public\n    status: InactivityCountdownTimerStatus = InactivityCountdownTimerStatus.stopped;\n    get started(): boolean {\n        return this.status === InactivityCountdownTimerStatus.started\n    }\n    get stopped(): boolean {\n        return this.status === InactivityCountdownTimerStatus.stopped\n    }\n\n    // dom\n    private logger: ILogger | null;\n    private window: Window;\n    private document: Document;\n\n    constructor(\n      private params?: IInactivityConfig,\n      private deps?: IInactivityDependencies,\n    ) {\n        this.logger = deps && deps.logger || console;\n        this.window = deps && deps.window || window;\n        this.document = deps && deps.document || document;\n        this.localStorage = this.detectAndAssignLocalStorage(deps && deps.localStorage);\n        if (params) { this.setup(params) }\n    }\n    /**\n     * @param params\n     * - **idleTimeoutTime**: 10000 - ms / 10 seconds\n     * - **localStorageKey**: 'inactivity_logout_local_storage'\n     */\n    setup(params?: IInactivityConfig): {start: () => void} {\n        this.cleanup();\n        Object.assign(this, defaultInactivityConfig, params);\n\n        this.ensureReasonableTimings(params);\n        this.attacheEventListeners();\n\n        const start = () => this.start();\n        return {start};\n    }\n\n    // see EVENT_LISTENERS_THIS_IE8.md about why we use handleEvent\n    /**\n     * The event listener object we implement\n     */\n    handleEvent(eventName: Event): void {\n        // we don't need to do anything with the eventName\n        // as we want all events to fire the same actions\n        let currentTime = (new Date).getTime();\n        this.setLastResetTimeStamp(currentTime);\n        this.throttle();\n    }\n\n    /**\n     * Starts the timer\n     */\n    start(): void {\n        this.setLastResetTimeStamp((new Date()).getTime());\n        this.startPrivate(this.internalTimeoutTime);\n        this.status = InactivityCountdownTimerStatus.started;\n    }\n\n    /**\n     * Clears the timer\n     */\n    stop(): void {\n        this.window.clearInterval(this.idleIntervalId);\n        this.status = InactivityCountdownTimerStatus.stopped;\n    }\n\n    /**\n     * **You must call cleanup** before you delete the object.\n     * As the timer in the class is calling a method on itself\n     * it will not be garbage collected if you just delete it.\n     */\n    cleanup(): void {\n        this.detachEventListeners();\n\n        // added in detectAndAssignLocalStorage for ie11\n        this.window.removeEventListener('storage', function() {});\n        this.window.clearTimeout(this.throttleTimeoutId);\n        this.stop();\n    }\n\n    private ensureReasonableTimings(params?: IInactivityConfig) {\n        if((params && typeof(params.startCountDownTimerAt)) === 'number') {\n            // if start count down timer is present make sure its a number and less than idleTimeoutTime\n            if(params.startCountDownTimerAt > this.idleTimeoutTime) {\n                this.logger.log('startCountdown time must be smaller than idleTimeoutTime, setting to idleTimeoutTime');\n                this.startCountDownTimerAt = this.idleTimeoutTime;\n                this.internalTimeoutTime = 1000; // start the countdown\n            } else {\n                this.startCountDownTimerAt = params.startCountDownTimerAt;\n                this.internalTimeoutTime = this.idleTimeoutTime - this.startCountDownTimerAt;\n            }\n        } else {\n            // don't use count down timer\n            this.startCountDownTimerAt = 0;\n            this.internalTimeoutTime = this.idleTimeoutTime;\n        }\n\n        if ((params && typeof(params.throttleDuration)) === 'number') {\n            const maxThrottleTime = Math.floor(this.internalTimeoutTime / 5);\n            params.throttleDuration;\n            if (params.throttleDuration > maxThrottleTime) {\n                this.logger.log(`throttle time must be smaller than 1/5th timeout time: ${this.internalTimeoutTime} setting to ${maxThrottleTime}ms`)\n                this.throttleDuration = maxThrottleTime;\n            }\n        }\n    }\n\n    private throttle() {\n       if (this.throttleDuration > 0 ) {\n           this.detachEventListeners();\n           this.throttleTimeoutId = this.window.setTimeout(() => {\n               this.attacheEventListeners();\n           }, this.throttleDuration);\n       }\n    }\n\n    private attacheEventListeners() {\n        // attach events that will rest the timers\n        // this ends up calling the this.handleEvent function\n        // see README.md for more on why we are passing 'this'\n        for(let i=0; i < this.resetEvents.length; i++) {\n            this.document.addEventListener(this.resetEvents[i], this, false)\n        }\n\n        for(let i=0; i < this.windowResetEvents.length; i++) {\n            this.window.addEventListener(this.windowResetEvents[i], this, false);\n        }\n    }\n\n    private detachEventListeners() {\n        for(let i=0; i < this.resetEvents.length; i++) {\n            this.document.removeEventListener(this.resetEvents[i], this, false)\n        }\n        for(let i=0; i < this.windowResetEvents.length; i++) {\n            this.window.removeEventListener(this.windowResetEvents[i], this, false);\n        }\n    }\n\n    private startPrivate(precision: number) {\n        this.currentTimerPrecision = precision;\n        this.idleIntervalId = this.window.setInterval(() => {\n            this.checkIdleTime();\n        }, precision);\n    }\n\n    private resetTimer(precision: number){\n        this.stop();\n        this.startPrivate(precision);\n    }\n\n    private timeout(): void {\n        this.cleanup();\n        if(this.timeoutCallback){\n            this.timeoutCallback();\n        }\n    }\n\n    private checkIdleTime(){\n        let currentTimeStamp = (new Date()).getTime();\n        let lastResetTimeStamp = this.getLastResetTimeStamp();\n        let milliSecondDiff = currentTimeStamp - lastResetTimeStamp;\n        let timeRemaining = this.idleTimeoutTime - milliSecondDiff;\n        this.checkTimerPrecision(timeRemaining);\n        this.handleCountDown(timeRemaining);\n        if(milliSecondDiff >= this.idleTimeoutTime) {\n            this.timeout();\n        }\n    }\n\n    private handleCountDown(timeRemaining: number) {\n        let inCountDownTimeFrame = (timeRemaining <= this.startCountDownTimerAt);\n        if(inCountDownTimeFrame && this.countDownCallback){\n            this.countingDown = true;\n            this.countDownCallback(Math.abs(Math.ceil(timeRemaining/1000)));\n        } else if (!inCountDownTimeFrame && this.countingDown) {\n            if(this.countDownCancelledCallback) {\n                this.countDownCancelledCallback();\n            }\n            this.countingDown = false;\n        }\n    }\n\n    private checkTimerPrecision(timeRemaining: number) {\n        // when we are counting down we want to\n        // increase the interval precision to seconds\n        if(timeRemaining <= this.startCountDownTimerAt){\n            // don't change if it's already seconds\n            if(this.currentTimerPrecision !== 1000) {\n                this.resetTimer(1000)\n            }\n        }\n        else {\n            // the js timer can be out by milliseconds, we need to set the timer to:\n            // the time remaining - when we start the count down timer\n            // eg 15 sec timeout, 10 sec countdown, time remaining 14345 secs\n            // timeout should be 4345 secs\n            let nextTimeoutWhen = timeRemaining - this.startCountDownTimerAt;\n            this.resetTimer(nextTimeoutWhen);\n        }\n    }\n\n    private getLastResetTimeStamp(): number {\n        if(this.localStorage){\n            const lastResetTimeStampString = this.localStorage.getItem(this.localStorageKey);\n            const lsLastResetTimeStamp = parseInt(lastResetTimeStampString, 10);\n            if (lsLastResetTimeStamp) {\n                return lsLastResetTimeStamp;\n            }\n        }\n        return this.lastResetTimeStamp\n    }\n\n    private setLastResetTimeStamp(timestamp: number): void {\n        if(this.localStorage){\n            this.localStorage.setItem(this.localStorageKey, timestamp.toString());\n        }\n        this.lastResetTimeStamp = timestamp;\n    }\n\n    private detectAndAssignLocalStorage(_localStorage?: Storage | null): Storage {\n        if (localStorageOrNull(_localStorage)) {\n            return _localStorage;\n        }\n\n        // this fixes a bug in ie11 where the local storage does not sync\n        // https://connect.microsoft.com/IE/feedback/details/812563/ie-11-local-storage-synchronization-issues\n        this.window.addEventListener('storage', function() {}); // effectively a no-op\n\n        let uid: string = (new Date()).getTime().toString() + 'detectAndAssignLocalStorage';\n        let storage: Storage = localStorage;\n        let result: boolean;\n        try {\n            storage.setItem(uid, uid);\n            result = storage.getItem(uid) === uid;\n            storage.removeItem(uid);\n            return result && storage;\n        } catch(exception) {\n            this.logger.log('LOCAL STORAGE IS NOT AVAILABLE FOR SYNCING TIMEOUT ACROSS TABS', exception);\n            return null;\n        }\n    }\n}\n\nfunction localStorageOrNull(value: Storage | null): boolean {\n    if (value === null)  {\n        return true;\n    }\n    return Boolean(value);\n}\n","export {InactivityCountdownTimer} from './inactivity-countdown-timer'\nexport {IInactivityConfig} from './inactivity-countdown-timer'\nexport {IRegisterCallBacks} from './inactivity-countdown-timer'\nexport {InactivityCountdownTimerStatus} from './inactivity-countdown-timer';\n"],"sourceRoot":""}